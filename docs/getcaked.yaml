openapi: 3.0.3
info:
  title: GetCaked
  description: Website project used for caking your ignorant coworkers/friends/classmates
  version: 1.0.0
  license:
    name: AGPL
    url: https://github.com/cakedgroup/getcaked/blob/master/LICENSE
servers:
  - url: 'https://getcaked.eu/api'
tags:
  - name: groups
    description: Group based Requests
  - name: comments
    description: Requests for user discourse
  - name: users
    description: User based Requests
  - name: cakeEvents
    description: CakeEvent based Requests
  - name: games
    description: Game play related requests
security:
  - jwtAuth: [] 
paths:
  /groups:
    get:
      tags:
        - groups
      summary: Gets list of groups
      description: Get list of groups (that match the search query)
      parameters:
        - in: query
          name: searchQuery
          required: false
          description: Search Query to find Groups by name (if empty returns all groups)
          schema:
            type: string
          example: 'testgroup'
      responses:
        '200':
          description: List of all groups found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
        tags:
          - groups
        summary: Creates a new Group
        description: Creates a new Group and saves it in the database. Requesting user becomes the group's admin
        security:
          - jwtAuth: []
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - groupName
                  - type
                properties:
                  groupName:
                    type: string
                    example: 'TINF20D'
                  type:
                    type: string
                    example: 'public'
        responses:
          '201':
            description: Group has been succesfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Group'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    missing-parameters:
                      type: array
                      items:
                        type: string
                        example: name
                    invalid-parameters:
                      type: array
                      items:
                        type: string
                        example: type
          '403':
            description: Action not permitted - requesting user is not logged in
          '409':
            description: Groupname already exists - didn't create group  
            
  /groups/{groupid}:
    patch:
      tags:
        - groups
      summary: Updates Data of a group
      description: Updates a Group
      security:
       - jwtAuth: []
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - groupName
                - type
              properties:
                groupName:
                  type: string
                  example: 'TINF20D'
                type:
                  type: string
                  example: 'public'
      responses:
        '204':
          description: all changes made successfully
        '404':
          description: group does not exist
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: type
        '403':
          description: Action not permitted - requesting user is not the group's admin
    delete:
      tags:
        - groups
      summary: deletes group
      description: Deletes a single group specified by the groupid
      security:
      - jwtAuth: []
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: group has been successfully deleted
        '403':
          description: Action not permitted - requesting user is not the group's admin
        '404':
          description: group does not exist
    get:
      tags:
        - groups
      summary: get single group
      description: Get specific group by groupid
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Group object for found group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group does not exist with that id
          
  /groups/{groupid}/users:
    post:
      tags:
        - groups
      summary: add user to specific group
      description: Add user to specific group
      security:
      - jwtAuth: []
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                invite-token:
                  type: string
                  example: 'super-secret-invite-token'
      responses:
        '201':
          description: User added to group
        '400':
          description: Invalid Request, group unchanged
        '403':
          description: Action not permitted - missing invite token
        '409':
          description: User is already in group
        '404':
          description: group does not exist
    get:
      tags:
        - groups
      summary: get users for group
      description: Get users of specific group by UUID
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: array of all users for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Group not found
          
  /groups/{groupid}/users/{userid}:
    delete:
      tags:
        - groups
      summary: remove user from group
      description: Remove user from specific groups
      security:
      - jwtAuth: []
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
        - in: path
          name: userid
          required: true
          description: ID of User
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User removed from group
        '400':
          description: Invalid Request, group unchanged
        '403':
          description: Action not permitted - requesting user is not the group's admin or the user themself
        '404':
          description: group or user does not exist
          
  /groups/{groupid}/invitetoken:
    get:
      tags:
        - groups
      summary: get invite token
      description: Get invite token for group
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invite link provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  invite-token:
                    type: string
                    example: 'super-secret-invite-token'
        '403':
          description: Action not permitted - requesting user is not the group's admin
        '400':
          description: Invalid or missing groupId
        
  /groups/{groupid}/cakeEvents:
    get:
      tags:
        - cakeEvents
      summary: get group's cakeevents
      description: get a list of all cakeevents associated with the group identified by groupid
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: list of all cakeevents associated with the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CakeEvent'
        '404':
          description: group does not exist
          
  /groups/{groupid}/comments:
    post:
      tags:
        - comments
      summary: add a comment under a specific group
      description: Add a user's comment to the comments section of a group
      security:
      - jwtAuth: []
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created
        '400':
          description: Invalid Request, comment was not created
        '403':
          description: Action not permitted
        '404':
          description: group does not exist
    get:
      tags:
        - comments
      summary: get all comments of a specific group
      description: Get comments of a specific group by UUID
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: array of all comments for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Group not found
          
  /cakeevents/{cakeeventid}:
    patch:
      tags:
        - cakeEvents
      summary: get a specific cakeevent
      description: Get a cakeevent based on uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cake-delivered:
                  type: boolean
                  example: 'false'
      parameters:
        - in: path
          name: cakeeventid
          required: true
          description: UUID of cakeevent
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: cakeevent object updated
        '400':
          description: Missing cakeeventid or malformed cakeEvent object
        '404':
          description: No Cakeevents found under that uuid
    get:
      tags:
        - cakeEvents
      summary: get a specific cakeevent
      description: Get a cakeevent based on uuid
      parameters:
        - in: path
          name: cakeeventid
          required: true
          description: UUID of cakeevent
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: cakeevent object related to the given uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CakeEvent'
        '400':
          description: Missing cakeeventid
        '404':
          description: No Cakeevents found under that uuid
          
  /cakeevents:
    post:
      tags:
        - cakeEvents
      summary: add a new cakeEvent
      description: creates a new cakeEvent associated with the group identified by groupid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: created a new cakeevent
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: Not enough time has elapsed
        '409':
          description: game has already been completed
                      
  /users:
    post:
      tags:
        - users
      summary: creates user
      description: Creates a users and adds them to the database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'Amos'
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: username
        '409':
          description: Username already exists - didn't create new User
          
  /users/{userid}:
    get:
      tags:
        - users
      summary: get user info
      description: Get single user by userid
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User does not exist with that id
    patch:
      tags:
        - users
      summary: Updates data of a user
      description: Updates a user
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of user
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'Bobby the Brown Bear'
                password-hash:
                  type: string
                  format: password
      responses:
        '204':
          description: all changes made successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: type
        '403':
          description: Action not permitted - a user can only change their own data
        '409':
          description: Username already exists - changes not made
    delete:
      tags:
        - users
      summary: deletes user
      description: Deletes the user specified by the userid
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of user
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: user has been successfully deleted
        '403':
          description: Action not permitted - requesting user is not the user to be deleted
          
  /auth:
    post:
      tags:
        - users
      summary: get auth-token
      description: Get JWT token for new user session when logging in
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'Amos'
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: auth-token for current user session
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth-token:
                    type: string
                    format: password
                    example: 'secret-scary-auth-token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: username
        '403':
          description: User credentials incorrect
    
  /games:   
    post:
      tags:
        - games
      summary: initialize game
      description: creates a new game, in order to cake a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                cakeVictitimName:
                  type: string
                  example: "bobby the bro"
                cakeVictitimId:
                  type: string
                  format: uuid
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                groupId:
                  type: string
                  format: uuid
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  
      responses:
        '201':
          description: created a new game
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameToken:
                    type: string
                  game:
                    $ref: '#/components/schemas/Game'
                    
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: groupid
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: timestamp
        '403':
          description: User credentials incorrect
    patch:
      tags:
        - games
      summary: play a move
      description: adds a game move to the existing game and signs the change off in the gameToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                gameToken:
                  type: string
                  example: "secret-stuff"
                game:
                  $ref: '#/components/schemas/Game'
                gameMove:
                  $ref: '#/components/schemas/GameMove'
                
      responses:
        '200':
          description: updated game
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameToken:
                    type: string
                  game:
                    $ref: '#/components/schemas/Game'
                  gameState:
                    type: number
                    example: 1
                    
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: gameToken
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: game
        '403':
          description: User credentials incorrect

components:
  responses:
    ForbiddenError:
      description: Action not permitted - requesting user is not logged in
  securitySchemes:
    jwtAuth:        
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Group:
      type: object
      required:
        - groupId
        - groupName
        - type
        - adminId
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        name:
          type: string
          example: "TINF20D"
        type:
          type: string
          example: "public"
        admin:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
    User:
      type: object
      required:
        - userId
        - username
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        username:
          type: string
          example: "Bobby the Brick builder"
    CakeEvent:
      type: object
      required:
        - cakeId
        - groupid
        - timestamp
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        groupid:
          type: string
        timestamp:
          type: string
          format: date-time
          example: '1969-04-20T17:32:28Z'
        username:
          type: string
          example: 'j-to-g-to-the-jannik as guest'
        cakeVictimId:
          type: string
          format: uuid
        cakeDelivered:
          type: boolean
          example: 'false'
    Comment:
      type: object
      required:
        - content
        - author
      properties:
        id: 
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        content:
          type: string
          example: 'Some cool comment'
        author:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        replies:
          $ref: '#/components/schemas/Comment'
    Game:
      type: object
      required:
        - gameId
        - startTime
        - groupId
        - moves
      properties:
        gameId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        startTime:
          type: string
          format: date-time
          example: '1969-04-20T17:32:28Z'
        userId:
          type: string
          format: uuid
        groupId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        moves:
          type: array
          items:
            $ref: '#/components/schemas/GameMove'
    GameMove:
      type: object
      required:
      - row
      - column
      properties:
        row:
          type: number
        column:
          type: number
