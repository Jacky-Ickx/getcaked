openapi: 3.0.3
info:
  title: GetCaked
  description: Website project used for caking your ignorant coworkers/friends/classmates
  version: 0.0.7
  license:
    name: AGPL
    url: https://github.com/cakedgroup/getcaked/blob/master/LICENSE
servers:
  - url: 'https://getcaked.eu/api'
tags:
  - name: groups
    description: Group based Requests
  - name: users
    description: User based Requests
  - name: cakeevents
    description: CakeEvent based Requests
  - name: debugging
    description: Requests used for debugging the code
paths:
  /groups:
    get:
      tags:
        - groups
      summary: Gets list of groups
      description: Get list of groups (that match the search query)
      parameters:
        - in: query
          name: search_query
          required: false
          description: Search Query to find Groups by name (if empty returns all groups)
          schema:
            type: string
          example: 'TINF'
      responses:
        '200':
          description: List of all groups found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
                    name:
                      type: string
                      example: "TINF20D"
                    type:
                      type: string
                      example: "public"
    post:
      tags:
        - groups
      summary: Creates a new Group
      description: |
        Creates a new Group and saves it in the database.
        Requesting user becomes the group's admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  example: 'TINF20D'
                type:
                  type: string
                  example: 'public'
      responses:
        '201':
          description: Group has been succesfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: name
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: type
        '403':
          description: Action not permitted - requesting user is not logged in
        '409':
          description: Groupname already exists - didn't create group

  /groups/{groupid}:
    get:
      tags:
        - groups
      summary: get single group
      description: Get specific group by groupid
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Group object for found group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group does not exist with that id
        '403':
          description: Action not permitted - requesting user is part of the group
    patch:
      tags:
        - groups
      summary: Updates Data of a group
      description: Updates a Group
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  example: 'TINF20D'
                type:
                  type: string
                  example: 'public'
      responses:
        '204':
          description: all changes made successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: type
        '403':
          description: Action not permitted - requesting user is not the group's admin
    delete:
      tags:
        - groups
      summary: deletes group
      description: Deletes a single group specified by the groupid
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: group has been successfully deleted
        '403':
          description: Action not permitted - requesting user is not the group's admin

  /groups/{groupid}/users/:
    get:
      tags:
        - groups
      summary: get users for group
      description: Get users of specific group by UUID
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: array of all users for group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          description: No users for group
        '404':
          description: Group object not found
        '403':
          description: Action not permitted - requesting user is part of the group
    post:
      tags:
        - groups
      summary: add user to specific group
      description: Add user to specific group
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: string
                  format: uuid
                invite-token:
                  type: string
                  example: 'super-secret-invite-token'
      responses:
        '200':
          description: User added to group
        '400':
          description: Invalid Request, group unchanged
        '403':
          description: Action not permitted - missing invite token

  /groups/{groupid}/users/{userid}:
    delete:
      tags:
        - groups
      summary: remove user from group
      description: Remove user from specific groups
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
        - in: path
          name: userid
          required: true
          description: ID of User
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User removed from group
        '400':
          description: Invalid Request, group unchanged
        '403':
          description: Action not permitted - requesting user is not the group's admin or the user themself

  /groups/{groupid}/invitetoken:
    get:
      tags:
        - groups
      summary: get invite token
      description: Get invite token for group
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invite link provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  invite-token:
                    type: string
                    example: 'super-secret-invite-token'
        '403':
          description: Action not permitted - requesting user is not the group's admin

  /users:
    post:
      tags:
        - users
      summary: creates user
      description: Creates a users and adds them to the database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'Amos'
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: username
        '409':
          description: Username already exists - didn't create new User

  /users/{userid}:
    get:
      tags:
        - users
      summary: get user info
      description: Get single user by userid
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Group does not exist with that id
    patch:
      tags:
        - users
      summary: Updates data of a user
      description: Updates a user
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'Bobby the Brown Bear'
                password-hash:
                  type: string
                  format: password
      responses:
        '204':
          description: all changes made successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: type
        '403':
          description: Action not permitted - a user can only change their own data
        '409':
          description: Username already exists - changes not made
    delete:
      tags:
        - users
      summary: deletes user
      description: Deletes the user specified by the userid
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of user
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: user has been successfully deleted
        '403':
          description: Action not permitted - requesting user is not the user to be deleted

  /auth:
    get:
      tags:
        - users
      summary: get auth-token
      description: Get JWT token for new user session when logging in
      parameters:
        - in: query
          name: username
          required: true
          description: Name of the Useraccount to login to
          schema:
            type: string
        - in: query
          name: password
          required: true
          description: User's password in plain text
          schema:
            type: string
      responses:
        '200':
          description: auth-token for current user session
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth-token:
                    type: string
                    format: password
                    example: 'secret-scary-auth-token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: username
        '403':
          description: User credentials incorrect

  /cakeevents:
    post:
      tags:
        - groups
        - cakeevents
      summary: add a new cakeevent
      description: creates a new cakeevent associated with the group identified by groupid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CakeEvent'
      responses:
        '201':
          description: created a new cakeevent
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  missing-parameters:
                    type: array
                    items:
                      type: string
                      example: groupid
                  invalid-parameters:
                    type: array
                    items:
                      type: string
                      example: timestamp

  /cakeevents/{cakeeventid}:
    patch:
      tags:
        - groups
        - cakeevents
      summary: get a specific cakeevent
      description: Get a cakeevent based on uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                approved:
                  type: boolean
                  example: true
                cake-delivered:
                  type: boolean
                  example: 'false'
      parameters:
        - in: path
          name: cakeeventid
          required: true
          description: UUID of cakeevent
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: cakeevent object updated
        '400':
          description: Missing cakeeventid
        '404':
          description: No Cakeevents found under that uuid
    delete:
      tags:
        - groups
        - cakeevents
      summary: delete a specific cakeevent
      description: Remove a cakeevent based on uuid
      parameters:
        - in: path
          name: cakeeventid
          required: true
          description: UUID of cakeevent
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: cakeevent object deleted
        '400':
          description: Missing cakeeventid
        '404':
          description: No Cakeevents found under that uuid
    get:
      tags:
        - groups
        - cakeevents
      summary: get a specific cakeevent
      description: Get a cakeevent based on uuid
      parameters:
        - in: path
          name: cakeeventid
          required: true
          description: UUID of cakeevent
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: cakeevent object related to the given uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CakeEvent'
        '400':
          description: Missing cakeeventid
        '404':
          description: No Cakeevents found under that uuid

  /cakeevents/bygroup/{groupid}:
    get:
      tags:
        - groups
        - cakeevents
      summary: get group's cakeevents
      description: get a list of all cakeevents associated with the group identified by groupid
      parameters:
        - in: path
          name: groupid
          required: true
          description: UUID of group
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: list of all cakeevents associated with the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CakeEvent'
        '400':
          description: missing groupid

  /cakeevents/byuser/{userid}:
    get:
      tags:
        - users
        - cakeevents
      summary: get user's cakeevents
      description: get a list of all cakeevents associated with the user identified by userid
      parameters:
        - in: path
          name: userid
          required: true
          description: UUID of user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: list of all cakeevents associated with the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CakeEvent'
        '400':
          description: missing userid

components:
  schemas:
    Group:
      type: object
      required:
        - id
        - name
        - type
        - admin
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        name:
          type: string
          example: "TINF20D"
        type:
          type: string
          example: "public"
        admin:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        username:
          type: string
          example: "Bobby the Brick builder"
    CakeEvent:
      type: object
      required:
        - id
        - groupid
        - timestamp
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        groupid:
          type: string
        timestamp:
          type: string
          format: date-time
          example: '1969-04-20T17:32:28Z'
        name:
          type: string
          example: 'j-to-g-to-the-jannik as guest'
        userid:
          type: string
          format: uuid
        approved:
          type: boolean
          example: true
        cake-delivered:
          type: boolean
          example: 'false'
